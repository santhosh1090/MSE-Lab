Subclasses : Every object you create in your application descends from the 'NSObject' foundation class. The NSObject class identifies properties and methods which apply to all objects. The NSObject class is divided into smaller groups of objects, called subclasses. Objects in these subclasses not only conform to the protocol of NSObject, they are also defined more precisely by the methods that govern their subclass. Every object class inherits from the superclasses above it in the object hierarchy, and also declares the methods which make it a unique class.
Protocol: The idea is to provide a way for classes to share the same method and property declarations without inheriting them from a common ancestor. This is especially useful in Objective-C when using the delegation pattern, on which the iOS and Mac OS SDKs rely heavily.

A subclass can override a method it inherits from the class it is based on. The class it is based on is called its superclass. 
Protocols are just the rules or properties to be used in the inherited classes to relate two different type of objects. Hence no concept of over riding.

For example, you may have a "car" class which has properties that are common to all cars such color, tires, engine, etc. For some reason you need to differentiate between different types of cars but you don't want to repeat all those properties and behaviors in each new class so you write subclasses of the "car" class. 

So you may have subclasses such as "manual cars", "automatic cars", "convertibles", "electric cars", etc. All of these subclasses have some common traits inherited from the "car" class but will also have some unique characteristics that can be included in the subclass.
Where as in case of protocols, A text field class might have a delegate that implements an informal protocol with an optional method for performing auto-completion of user-typed text. The text field discovers whether the delegate implements that method (via reflection) and, if so, calls the delegate's method to support the auto-complete feature.

Protocols have many advantages. The idea is to provide a way for classes to share the same method and property declarations without inheriting them from a common ancestor. This is especially useful in Objective-C when using the delegation pattern, on which the iOS and Mac OS SDKs rely heavily. There's plenty of information out there on the subject, including a good overview in Apple's developer documentation.
Protocols often include optional methods, which, if implemented, can change the behavior of a class. For example, a text field class might have a delegate that implements an informal protocol with an optional method for performing auto-completion of user-typed text
A formal protocol is similar to an interface in Java or C#. It is a list of methods that any class can declare itself to implement. A class must be declared to implement that protocol to be said to conform to it. This is detectable at runtime. Formal protocols cannot provide any implementations; they simply assure callers that classes that conform to the protocol will provide implementations. 


 
Protocols are a way of enforcing certain methods to be utilized, regardless of the actual class the object is part of, thus ensuring that a certain form of method template is implemented. Basically, a way of declaring an interface to an object while concealing it's class. This is why we write a protocol in a similar way to how we would write an interface declaration.


You can relate two different objects by confirming to a protocol, and rather than having to inherit from a superclass whereby you are required to have the two objects relate to each other, you can just concentrate on a list of methods that will makeup the protocol without having to think about the concrete class and type of class that will make use of it.

You may want to override the methods in existing classes.  Some objects have default methods and settings that may not be suitable for your needs.  By creating a custom subclass, you can set your interface elements to inherit qualities according to your criteria, not just from the object's default class implementation.  
